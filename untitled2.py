import pandas as pd
import streamlit as st
from PIL import Image
import requests
from io import BytesIO
# Load the CSV file into a DataFrame
df = pd.read_csv('combined_block.csv', delimiter=',', encoding='utf-8')

# Handle missing values if any
df = df.dropna()

# Convert timestamps to datetime objects
df['block_timestamp'] = pd.to_datetime(df['block_timestamp'], unit='s')
df['transaction_timestamp'] = pd.to_datetime(df['transaction_timestamp'], unit='s')

# Set the page layout and title
st.set_page_config(page_title="Blockchain Data Explorer", layout="wide")

# Add custom CSS for styling
st.markdown(
    """
    <style>
    body {
        color: white;
        background-color: #2c3e50; /* Dark background for contrast */
    }
    .sidebar .sidebar-content {
        background-color: #34495e; /* Darker sidebar background */
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Load the image from the raw URL
image_url = "https://raw.githubusercontent.com/Sneakyfox1051/Fox-Chain/main/sneakyfox_1051-removebg-preview.png"
response = requests.get(image_url)
image = Image.open(BytesIO(response.content))

# Display the image at the topmost portion
st.image(image, use_column_width=False, width=70)  # Adjust width as needed

# Main title and description
st.title('Fox Chain - Blockchain Data Explorer')
st.write("""
    Explore and query blockchain data easily. 
    You can ask questions or view specific details from the blockchain.
""")

# Sidebar for toggling between Query and Search
st.sidebar.header("Navigation")
option = st.sidebar.selectbox("Choose an option:", ("Query Blockchain Data", "Search Blockchain Data"))

import re

def query_model(query, df):
     # Normalize the query to lowercase and strip surrounding whitespace
    query = query.lower().strip().rstrip('.')

    # Check for greetings
    greetings = ["hi", "hello", "hey", "greetings", "what's up"]
    if any(greet in query for greet in greetings):
        return "Hello! Welcome to the Fox Chain - Blockchain Data Explorer. You can explore and query blockchain data easily. Please enter your question or choose from the options provided."

    # Define informative responses
    informative_responses = {
        "amount": "The 'amount' in a blockchain transaction represents the value being transferred from one party to another. It is often expressed in a specific currency or token.",
        "block": "A block in a blockchain contains a collection of transactions that have been validated and recorded. Each block is linked to the previous one, forming a chain.",
        "purpose of a blockchain": "Blockchain technology provides a secure and transparent way to record transactions and data across a distributed network, ensuring integrity and trust without a central authority.",
        "sender": "The 'sender' in a blockchain transaction is the party initiating the transfer of value or data to another party (the receiver).",
        "receiver": "The 'receiver' in a blockchain transaction is the party that receives the value or data from the sender.",
        "transaction id": "A transaction ID is a unique identifier assigned to each transaction in the blockchain, allowing for easy tracking and verification.",
        "nonce": "A nonce is a number used once in cryptographic communications. In blockchain, it is often used to ensure that each block is unique and to prevent replay attacks.",
        "block contents": "A block contains the following parameters: index, block_timestamp, previous_hash, nonce, hash, sender, receiver, amount, transaction_timestamp, transaction_id.",
        "hash": "A hash is a fixed-length string of characters generated by a hash function. It uniquely represents the data in a block and ensures data integrity by making it nearly impossible to alter without detection.",
    }

    # Use regex to find a number in the query
    match = re.search(r'\d+', query)
    if match:
        index = int(match.group())

        # Check for specific parameters in the query
        if 'amount' in query:
            parameter = 'amount'
        elif 'sender' in query:
            parameter = 'sender'
        elif 'hash' in query:
            parameter = 'hash'
        elif 'previous_hash' in query:
            parameter = 'previous_hash'
        elif 'transaction id' in query or 'transaction_id' in query:
            parameter = 'transaction_id'
        elif 'nonce' in query:
            parameter = 'nonce'
        elif 'transaction_timestamp' in query:
            parameter = 'transaction_timestamp'
        elif 'receiver' in query:
            parameter = 'receiver'
        else:
            return "Invalid query. Please ask about a specific parameter (e.g., sender, amount)."

        # Search the DataFrame based on the index and parameter
        try:
            row = df.loc[df['index'] == index]
        except KeyError:
            return f"No data found for index {index}"

        # Check if the parameter exists in the DataFrame
        if parameter in row.columns:
            if not row.empty:
                value = row[parameter].values[0]
                return f"The {parameter} of block {index} is {value}."
            else:
                return f"No data found for block {index}"
        else:
            return f"No information available for parameter '{parameter}'"

    # If no index is found, check for informative keywords
    for keyword, response in informative_responses.items():
        if keyword in query:
            return response

    # If no relevant keyword is found, return a general message
    return "Please provide a block index to retrieve specific information or ask a general question about blockchain."


# Input section for Query Blockchain Data
if option == "Query Blockchain Data":
    st.subheader("Query Blockchain Data")
    
    # Sample questions to guide users
    st.write("Here are some sample questions you can ask:")
    st.write("1. Who is the sender of block 1?")
    st.write("2. What is the amount in block 1?")
    st.write("3. Give me the transaction ID of block 1.")
    st.write("4. What does a block represent?")
    
    # Create a text input for the user's query
    user_input = st.text_input("Enter your question:")

    # Query and display the result
    if user_input:
        response = query_model(user_input, df)
        st.write("Model's response:", response)

# Input section for Search Blockchain Data
if option == "Search Blockchain Data":
    st.subheader("Search Blockchain Data")
    columns = df.columns.tolist()
    selected_column = st.selectbox("Select a column to filter", columns)
    filter_value = st.text_input(f"Enter the value to search in '{selected_column}':")

    # Filter and display the DataFrame based on user input
    if filter_value:
        filtered_df = df[df[selected_column].astype(str).str.contains(filter_value, case=False, na=False)]
        if not filtered_df.empty:
            st.write(f"Showing results for {selected_column} containing '{filter_value}':")
            st.dataframe(filtered_df)
        else:
            st.write(f"No results found for {selected_column} containing '{filter_value}'")
